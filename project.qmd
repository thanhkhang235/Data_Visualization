---
title: "My project"
author: "Khang Nguyen Thanh"
date: "2023-11-06"
output: html_document
---

```{r}
library(tidyverse)
library(ggplot2)
library(conflicted)
library(forcats)
library(scales)
library(plotly)
library(leaflet)
library(maps)
```

## Data

```{r}
df1 <- read.csv("data/incidents.csv")
df1 
```

```{r}
df2 <- read.csv("data/state.csv")
df2
```

```{r}
data <- left_join(df1,
          df2, 
          join_by( State == state_code)) 
data

```

```{r}
count(data,Smoke.alarms, sort= TRUE)
count(data,Cause, sort= TRUE)
count(data,Residential.building.type, sort = TRUE)
count(data,MFI, sort = TRUE)
```

## Basic Plots

```{r}
# Plotting Cause
data |> 
  group_by(Cause) |>
  filter(n() > 120) |> 
  ggplot(aes(y = fct_rev(fct_infreq(Cause)),fill=Cause)) +
  guides(fill = FALSE) +  # remove legend for fill 
  geom_bar() +
  geom_text(stat="count",aes(label = scales::comma(after_stat(count))), vjust = -0.5,size = 3) +
  labs(title = "Type of Cause of Fire",
       x = "Count",
       y = "Causes") +
  theme_classic() 
```

```{r}
# Fire by general property type 
data |> 
  group_by(Residential.building.type) |>
  ggplot(aes(y = fct_rev(fct_infreq(Residential.building.type)),fill=Residential.building.type)) +
  guides(fill = FALSE) +  # remove legend for fill 
  geom_bar() +
  geom_text(stat="count",aes(label = scales::comma(after_stat(count))), vjust = -0.5,size = 3) +
  labs(title = "Type of resident",
       x = "Count",
       y = "Type") +
  theme_classic() 
```

```{r}

fire_data <- data |>
  mutate(Incident_Date = as.Date(Date, format = "%m/%d/%Y")) |>
  mutate(Incident_Year = lubridate::year(Incident_Date)) |>
  filter(!is.na(Incident_Year)) |>
  filter(Cause != "Under investigation" & Cause != "Undetermined") |>
  group_by(Incident_Year, Cause) |>
  count(Cause)

causes_time <- ggplot(fire_data, aes(x = Incident_Year, y = n, fill = Cause)) +
  geom_col(position = "stack") +
  labs(x = "Year of Incident", y = "Count", title = "Causes of Fire Incidents Since 2012") +
  theme_minimal() +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
        panel.background = element_blank())
causes_time

# find a way to adjust the color => read the book 
# or find a different type of map to show it ???
```


```{r}
# Creating a mapping of causes to broader categories
cause_to_category <- data.frame(
  Cause = c("Under investigation", "Smoking", "Electrical malfunction",
            "Cooking", "Heating", "Other heat", "Open flame",
            "Other unintentional/Careless", "Equipment malfunction", "Natural"),
  Category = c("Investigation", "Behavioral", "Equipment", 
               "Behavioral", "Equipment", "Equipment", "Behavioral",
               "Behavioral", "Equipment", "Natural")
)

# Merging the cause-to-category mapping with the fire data
fire_data_with_categories <- merge(fire_data, cause_to_category, by = "Cause") |>  filter(Category != "Investigation")

ggplot(fire_data_with_categories, aes(x = Incident_Year, y = n, fill = Category)) +
  geom_area() +
  labs(x = "Year of Incident", y = "Count", title = "Fire Incident Categories Since 2012") +
  theme_minimal() +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
        panel.background = element_blank())
```
```{r}
# Convert 'Incident_year' to a proper date format
fire_data$Incident_Year <- as.Date(paste0(fire_data$Incident_Year, "-01-01"))

# Aggregate incident counts per year
incident_counts_per_year <- fire_data %>%
  filter(year(Incident_Year) != 2023) %>% 
  group_by(Incident_Year) %>%
  summarise(Total_Incidents = sum(n))

# Create a sequence of years covering the entire range
all_years <- seq(min(incident_counts_per_year$Incident_Year),
                 max(incident_counts_per_year$Incident_Year),
                 by = "year")

# Ensure all years are included, filling missing years with 0 incidents
incident_counts_per_year <- incident_counts_per_year %>%
  complete(Incident_Year = all_years) %>%
  mutate(Total_Incidents = replace_na(Total_Incidents, 0))

# Plotting the change in incident counts over the years
ggplot(incident_counts_per_year, aes(x = Incident_Year, y = Total_Incidents)) +
  geom_line(color = "blue") +
  labs(title = "Change in Incident Counts Over the Years",
       x = "Year",
       y = "Total Incident Counts") +
  theme_minimal()
```

```{r}
# Filter data for only the top 5 causes
fire_data_filtered <- fire_data_with_categories %>%
  filter(Cause != "Under investigation" & Cause != "Undetermined") %>%
  group_by(Cause) %>%
  summarise(Count = n()) %>%
  top_n(5, Count) %>%
  pull(Cause)

top_causes <- data %>%
  filter(Cause %in% fire_data_filtered)

# Create a summary table for counts of incidents per Age Demographic and Cause
summary_table <- top_causes %>%
  group_by(Age.demographic, Cause) %>%
  summarise(Count = n()) %>%
  ungroup()

# Create a heatmap for Age Demographic vs. Cause for top 5 causes
ggplot(summary_table, aes(x = Age.demographic, y = Cause, fill = Count)) +
  geom_tile() +
  scale_fill_gradient(low = "lightblue", high = "darkblue") +  # Adjust color gradient
  labs(title = "Relationship between Age Demographic Causes of Incidents",
       x = "Age Demographic",
       y = "Cause") +
  theme_minimal()  
## address unknown => the unknown shows the highest corrrelation but we don't know about them 
```

```{r}
state_counts <- data |>
  count(state) |>
  rename(region = state, incident_count = n)
state_counts
```

```{r}
# Aggregate incident counts per state
state_counts <- data |>
  count(State = tools::toTitleCase(state)) |>
  rename(region = State, incident_count = n)

# Get the US state map data
us_map <- map_data("state")

# Harmonize state names in the map data
us_map$region <- tools::toTitleCase(us_map$region)

# Merge the incident counts with map data
merged_data <- state_counts |>
  left_join(us_map, by = c("region" = "region")) 
```

```{r}

# Plotting the map with incident counts
ggplot() +
  geom_map(data = merged_data, map = merged_data,
           aes(map_id = region, fill = incident_count),
           color = "black") +
  expand_limits(x = merged_data$long, y = merged_data$lat) +
  scale_fill_gradient(low = "lightblue", high = "red", na.value = "grey50",
                      name = "Incident Count", guide = "colorbar") +
  labs(title = "Home Fire Incidents Across US States") +
  theme_minimal() +
  theme(axis.title = element_blank(),
        axis.text = element_blank(),
        axis.ticks = element_blank(),
    legend.position = "bottom")

# why one state has more incidents than others => population + type of resident 
# => investigate that to go further => answer this question 
# incident rate instead of incident counts 

```


```{r}
# Aggregate incident counts per state
state_counts_2 <- df |>
  group_by(state) |>
  summarise(incident_count = sum(incident), population = first(population)) |>
  rename(region = state)

# Get the US state map data
us_map <- map_data("state")

# Harmonize state names in the map data
 us_map$region <- str_to_title(us_map$region)

# Merge the incident counts with map data
merged_data_3 <- merge(us_map, state_counts_2, by = "region", all.x = TRUE)

# Calculate incident ratio per population
merged_data_3$ratio <- merged_data_3$incident_count / merged_data_3$population

# Plotting the map with incident ratio
ggplot() +
  geom_map(data = merged_data_3, map = merged_data_3,
           aes(map_id = region, fill = ratio),
           color = "black") +
  expand_limits(x = merged_data_3$long, y = merged_data_3$lat) +
  scale_fill_gradient(low = "lightblue", high = "red", na.value = "grey50",
                      name = "Incident Ratio", guide = "colorbar") +
  labs(title = "Home Fire Incident Ratio Across US States") +
  theme_minimal() +
  theme(axis.title = element_blank(),
        axis.text = element_blank(),
        axis.ticks = element_blank(),
        panel.grid = element_blank(),
        legend.position = "bottom")


## problem with the long and lat => the map is not perfect but it is more menaning
```


```{r}
# Calculate incident counts per state
state_counts <- data %>%
  count(State = tools::toTitleCase(state)) %>%
  rename(region = State, incident_count = n)

# Merge incident counts with population data (assuming X2020_census is the population column)
merged_data_2 <- state_counts %>%
  left_join(select(data, state, X2020_census), by = c("region" = "state")) |>
  rename(population = X2020_census, incident = incident_count) 

```

```{r}
# Create a correlation matrix
correlation_matrix <- cor(merged_data_2[, c("population", "incident")])

# Create a heatmap for the correlation matrix
library(ggplot2)
library(reshape2)

correlation_melted <- melt(correlation_matrix)
ggplot(correlation_melted, aes(Var1, Var2, fill = value)) +
  geom_tile() +
  scale_fill_gradient(low="lightblue", high="darkblue", name="Correlation") +
  labs(title="Correlation Heatmap between Accidents and Population per State", x="Variable", y="Variable") +
  theme_minimal()

## Just need to show a table ( correlation matrix table) - too much plot the teacher said that, so a table will be more suitable


```

```{r}
ggplot(merged_data_2, aes(x = population, y = incident, size = incident, color = incident)) +
  geom_point(alpha = 0.6) +
  scale_size_continuous(range = c(3, 15)) +
  scale_color_gradient(low = "blue", high = "red") +
  labs(title = "Accidents and Population per State", x = "Population", y = "Accidents") +
  theme_minimal()
```


```{r}
unique <- merged_data_2 |> unique()
```

```{r}
df <- inner_join(data, unique, join_by(state==region))
df
```
```{r}
# Group data by state and smoke alarms, summing up accidents
grouped_data <- df %>%
  filter(Smoke.alarms != "Not reported") %>%
  group_by(state, Smoke.alarms) %>%
  summarise(total_accidents = sum(incident)) %>%
  filter(state %in% top_5_states)

# Create a grouped bar plot
ggplot(grouped_data, aes(x = state, y = total_accidents, fill = Smoke.alarms)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Accidents Count based on Smoke Alarms",
       x = "State", y = "Accidents Count", fill = "Smoke Alarms") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "bottom")

```


```{r}
grouped_data_residential <- df %>%
  group_by(state, Residential.building.type) %>%
  summarise(total_accidents = sum(incident)) %>%
  filter(state %in% top_5_states)

# Create a grouped bar plot
ggplot(grouped_data_residential, aes(x = state, y = total_accidents, fill = Residential.building.type)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Accidents Count based on Residential Building Type",
       x = "State", y = "Accidents Count", fill = "Residential Building Type") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "bottom")
```



