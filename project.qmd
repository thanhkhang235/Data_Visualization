---
title: "My Exploratory plots for Data Visualization"
date: today
date-format: "dddd, [the] D[<sup style='font-size:65%;font-style:italic;'>th</sup>] [of] MMMM, YYYY"
institute: Data Visualization
author: "Thanh Khang Nguyen"
---

```{r}
library(tidyverse)
library(ggplot2)
library(conflicted)
library(forcats)
library(scales)
library(maps)
```

## About the dataset

### Data 1: US Home Fire Fatalities in the News
```{r}
df1 <- read.csv("data/incidents.csv")
head(df1)
```
### Data 2: us population by state
```{r}
df2 <- read.csv("data/state.csv")
head(df2)
```
### Joing 2 dataset to get my final data
```{r}
data <- left_join(df1,
          df2, 
          join_by( State == state_code)) 
head(data)

```
## Exploring data 

```{r}
count(data,Smoke.alarms, sort= TRUE)
count(data,Cause, sort= TRUE)
count(data,Residential.building.type, sort = TRUE)
count(data,MFI, sort = TRUE)
```

## Basic Plots
### Type of Cause of Fire 

```{r}
# Plotting Cause
data |> 
  group_by(Cause) |>
  dplyr::filter(n() > 120) |> 
  ggplot(aes(y = fct_rev(fct_infreq(Cause)),fill=Cause)) +
  guides(fill = FALSE) +  # remove legend for fill 
  geom_bar() +
  geom_text(stat="count",aes(label = scales::comma(after_stat(count))), vjust = -0.5,size = 3) +
  labs(title = "Type of Cause of Fire",
       x = "Count",
       y = "Causes") +
  theme_classic() 
```
### Fire by general property type 
```{r}
data |> 
  group_by(Residential.building.type) |>
  ggplot(aes(y = fct_rev(fct_infreq(Residential.building.type)),fill=Residential.building.type)) +
  guides(fill = FALSE) +  # remove legend for fill 
  geom_bar() +
  geom_text(stat="count",aes(label = scales::comma(after_stat(count))), vjust = -0.5,size = 3) +
  labs(title = "Type of Resident",
       x = "Count",
       y = "Type") +
  theme_classic() 
```
## How Cause of Home Fire Fatalities has changed over the year ? 

### Original Plot
```{r}
fire_data <- data |>
  mutate(Incident_Date = as.Date(Date, format = "%m/%d/%Y")) |>
  mutate(Incident_Year = lubridate::year(Incident_Date)) |>
  dplyr::filter(!is.na(Incident_Year)) |>
  dplyr::filter(Cause != "Under investigation" & Cause != "Undetermined") |>
  group_by(Incident_Year, Cause) |>
  count(Cause)

causes_time <- ggplot(fire_data, aes(x = Incident_Year, y = n, fill = Cause)) +
  geom_col(position = "stack") +
  labs(x = "Year of Fatalities", y = "Count", title = "Causes of Fire Fatalities Since 2012") +
  theme_minimal() +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
        panel.background = element_blank())
causes_time

# find a way to adjust the color => read the book 
# or find a different type of map to show it ???
```

### Improved Plot 
Divide and combine into 3 meata-catagory: Behavioral, Equipment, Natural
```{r}
# Creating a mapping of causes to broader categories
cause_to_category <- data.frame(
  Cause = c("Under investigation", "Smoking", "Electrical malfunction",
            "Cooking", "Heating", "Other heat", "Open flame",
            "Other unintentional/Careless", "Equipment malfunction", "Natural"),
  Category = c("Investigation", "Behavioral", "Equipment", 
               "Behavioral", "Equipment", "Equipment", "Behavioral",
               "Behavioral", "Equipment", "Natural")
)

# Merging the cause-to-category mapping with the fire data
fire_data_with_categories <- merge(fire_data, cause_to_category, by = "Cause") |>  dplyr::filter(Category != "Investigation")

ggplot(fire_data_with_categories, aes(x = Incident_Year, y = n, fill = Category)) +
  geom_area() +
  labs(x = "Year of Fatalities", y = "Count", title = "Fire Fatalities Categories Since 2012") +
  theme_minimal() +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
        panel.background = element_blank())
```
## How the total number of Fire Fatalities changed over the year 
```{r}
# Convert 'Incident_year' to a proper date format
fire_data$Incident_Year <- as.Date(paste0(fire_data$Incident_Year, "-01-01"))

# Aggregate incident counts per year
incident_counts_per_year <- fire_data %>%
  dplyr::filter(year(Incident_Year) != 2023) %>% 
  group_by(Incident_Year) %>%
  summarise(Total_Incidents = sum(n))

# Create a sequence of years covering the entire range
all_years <- seq(min(incident_counts_per_year$Incident_Year),
                 max(incident_counts_per_year$Incident_Year),
                 by = "year")

# Ensure all years are included, filling missing years with 0 incidents
incident_counts_per_year <- incident_counts_per_year %>%
  complete(Incident_Year = all_years) %>%
  mutate(Total_Incidents = replace_na(Total_Incidents, 0))

# Plotting the change in incident counts over the years
ggplot(incident_counts_per_year, aes(x = Incident_Year, y = Total_Incidents)) +
  geom_line(color = "blue") +
  labs(title = "Change in Fatalities Counts Over the Years",
       x = "Year",
       y = "Total Fatalities Counts") +
  theme_minimal()
```

## Relationship between Age Demographic and Type of Fatalities
 
```{r}
# Filter data for only the top 5 causes
fire_data_filtered <- fire_data_with_categories |>
  dplyr::filter(Cause != "Under investigation" & Cause != "Undetermined") |>
  group_by(Cause) |>
  summarise(Count = n()) |>
  top_n(5, Count) |>
  pull(Cause)

top_causes <- data |>
  dplyr::filter(Cause %in% fire_data_filtered)

# Create a summary table for counts of incidents per Age Demographic and Cause
summary_table <- top_causes |>
  group_by(Age.demographic, Cause) |>
  summarise(Count = n()) |>
  ungroup()

# Create a heatmap for Age Demographic vs. Cause for top 5 causes
ggplot(summary_table, aes(x = Age.demographic, y = Cause, fill = Count)) +
  geom_tile() +
  scale_fill_gradient(low = "lightblue", high = "darkblue") +  # Adjust color gradient
  labs(title = "Relationship between Age Demographic Vs Causes of Fatalities",
       x = "Age Demographic",
       y = "Cause") +
  theme_minimal()  
## address unknown => the unknown shows the highest corrrelation but we don't know about them 
```
## Investigate the Unknown Age demegaphic 
```{r}
selected_columns <- 
  data |>
  select(Age.demographic, Age) |>
  dplyr:: filter(Age.demographic == "Unknown")
```

```{r}
# Creating a new column for age category
selected_columns$Age_Category <- ifelse(selected_columns$Age == "Unknown", "Unknown", 
                           ifelse(!is.na(as.numeric(selected_columns$Age)) & as.numeric(selected_columns$Age) >= 18 & as.numeric(selected_columns$Age) <= 64 , "Adult (18-64)", NA))
selected_columns$Age_Category[is.na(selected_columns$Age_Category)] <- "Not Adult"
```
```{r}
selected_columns |> 
  group_by(Age_Category) |>
  ggplot(aes(y = fct_rev(fct_infreq(Age_Category)),fill=Age_Category)) +
  guides(fill = FALSE) +  # remove legend for fill 
  geom_bar() +
  geom_text(stat="count",aes(label = scales::comma(after_stat(count))), vjust = -0.5,size = 3) +
  labs(title = "Age Demographic for Unknow age",
       x = "Count",
       y = "Age Category") +
  theme_classic() 
```

```{r}
selected_columns |>
  group_by(Age_Category) |>
  summarize(count = n()) |>
  ggplot(aes(x = "", y = count, fill = Age_Category)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar("y", start = 0) +
  geom_text(aes(label = scales::comma(count)), position = position_stack(vjust = 0.5), size = 3) +
  labs(title = "Age Demographic for Unknown Age",
       x = NULL,
       y = NULL) +
  theme_void() +
  theme(legend.position = "right")


```
## Fire Fatalities distribution by state 

```{r}
state_counts <- data |>
  count(state) |>
  rename(region = state, incident_count = n)
```


```{r}
# Aggregate incident counts per state
state_counts <- data |>
  count(State = tools::toTitleCase(state)) |>
  rename(region = State, incident_count = n)

# Get the US state map data
us_map <- map_data("state")

# Harmonize state names in the map data
us_map$region <- tools::toTitleCase(us_map$region)

# Merge the incident counts with map data
merged_data <- state_counts |>
  left_join(us_map, by = c("region" = "region")) 
```

```{r}

# Plotting the map with incident counts
ggplot() +
  geom_map(data = merged_data, map = merged_data,
           aes(map_id = region, fill = incident_count),
           color = "black") +
  expand_limits(x = merged_data$long, y = merged_data$lat) +
  scale_fill_gradient(low = "lightblue", high = "red", na.value = "grey50",
                      name = "Incident Count", guide = "colorbar") +
  labs(title = "Home Fire Incidents Across US States") +
  theme_minimal() +
  theme(axis.title = element_blank(),
        axis.text = element_blank(),
        axis.ticks = element_blank(),
    legend.position = "bottom")
```


```{r}
# Calculate incident counts per state
state_counts <- data |>
  count(State = tools::toTitleCase(state)) |>
  rename(region = State, incident_count = n)

# Merge incident counts with population data (assuming X2020_census is the population column)
merged_data_2 <- state_counts %>%
  left_join(select(data, state, X2020_census), by = c("region" = "state")) |>
  rename(population = X2020_census, incident = incident_count) 

```

```{r}
unique <- merged_data_2 |> unique()
```

```{r}
# Get the US state map data
us_map <- map_data("state")

# Convert state names to lowercase for case-insensitive matching
unique$region_lower <- tolower(unique$region)
us_map$region_lower <- tolower(us_map$region)

# Merge the incident counts with map data using case-insensitive matching
merged_data_3 <- merge(us_map, unique, by.x = "region_lower", by.y = "region_lower", all.x = TRUE)

# Drop the auxiliary lowercase columns
merged_data_3 <- merged_data_3[, !(names(merged_data_3) %in% c("region_lower.x", "region_lower.y"))]


# Calculate incident ratio per population
merged_data_3$ratio <- (merged_data_3$incident / merged_data_3$population) * 1000

# Impute missing values in the ratio column with zero
merged_data_3$ratio[is.na(merged_data_3$ratio)] <- 0
```


```{r}
# Select only necessary columns for plotting
plot_data <- merged_data_3[c("region_lower", "long", "lat", "ratio")]

# Remove rows with missing values in the necessary columns
plot_data <- plot_data[complete.cases(plot_data), ]

# Adjust the color scale
ggplot() +
  geom_map(data = plot_data, map = plot_data,
           aes(map_id = region_lower, fill = ratio),
           color = "black") +
  
  expand_limits(x = plot_data$long, y = plot_data$lat) +
  scale_fill_gradient(low = "lightblue", high = "red", na.value = "grey50",
                      name = "Incident Ratio", guide = "colorbar") +
  labs(title = "Home Fire Incidents Across US States") +
  theme_minimal() +
  theme(axis.title = element_blank(),
        axis.text = element_blank(),
        axis.ticks = element_blank(),
        legend.position = "bottom")

```







## Finding the State with high population but fewer Fatalities


```{r}
# Finding the state with high population but fewer incidents
state_with_low_incidents <- merged_data_3[which.min(merged_data_3$Incident_count / merged_data_3$Population), ]

# Displaying the state information
print(state_with_low_incidents)
```
## Correlation between population and number of incident per state 
```{r}
# Create a correlation matrix
correlation_matrix <- cor(merged_data_2[, c("population", "incident")])

# Create a heatmap for the correlation matrix
library(ggplot2)
library(reshape2)

correlation_melted <- melt(correlation_matrix)
ggplot(correlation_melted, aes(Var1, Var2, fill = value)) +
  geom_tile() +
  scale_fill_gradient(low="lightblue", high="darkblue", name="Correlation") +
  labs(title="Correlation Heatmap Between Incidents And Population Per State", x="Variable", y="Variable") +
  theme_minimal()

## Just need to show a table ( correlation matrix table) in final product 
```
## Bubble Visualtion for the correlation 
```{r}
ggplot(merged_data_2, aes(x = population, y = incident, size = incident, color = incident)) +
  geom_point(alpha = 0.6) +
  scale_size_continuous(range = c(3, 15)) +
  scale_color_gradient(low = "blue", high = "red") +
  labs(title = "Incidents and Population per State", x = "Population", y = "Incidents") +
  theme_minimal()
```





